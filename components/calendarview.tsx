/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/NC0wFNOJPpq
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useEffect } from "react"
import { useUser } from "@clerk/nextjs"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { ActionPlanDisplay } from "./ActionPlanDisplay"
import { LoginButton } from "./LoginButton"

export function Calendarview() {
  const { isSignedIn, user } = useUser()
  const [actionPlan, setActionPlan] = useState<any>(null)
  const [jsonInput, setJsonInput] = useState("")

  useEffect(() => {
    if (isSignedIn) {
      fetchActionPlan()
    }
  }, [isSignedIn])

  const fetchActionPlan = async () => {
    try {
      const response = await fetch('/api/actionPlans')
      if (response.ok) {
        const plan = await response.json()
        if (plan) {
          setActionPlan(plan)
        }
      }
    } catch (error) {
      console.error("Failed to fetch action plan:", error)
    }
  }

  const handleJsonSubmit = async () => {
    try {
      const parsedPlan = JSON.parse(jsonInput)
      setActionPlan(parsedPlan)
      await saveActionPlan(parsedPlan)
    } catch (error) {
      console.error("Invalid JSON input", error)
      // You might want to show an error message to the user here
    }
  }

  const saveActionPlan = async (plan: any) => {
    try {
      const response = await fetch('/api/actionPlans', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(plan),
      })
      if (!response.ok) {
        throw new Error('Failed to save action plan')
      }
    } catch (error) {
      console.error("Failed to save action plan:", error)
      // You might want to show an error message to the user here
    }
  }

  const handleActionPlanUpdate = async (updatedPlan: any) => {
    setActionPlan(updatedPlan)
    await saveActionPlan(updatedPlan)
  }

  return (
    <div className="grid gap-6 max-w-6xl mx-auto p-4 md:p-6">
      <h1 className="text-2xl font-bold">Action Plan Calendar</h1>
      <LoginButton />
      {isSignedIn ? (
        actionPlan ? (
          <ActionPlanDisplay plan={actionPlan} onUpdate={handleActionPlanUpdate} />
        ) : (
          <>
            <Textarea
              value={jsonInput}
              onChange={(e) => setJsonInput(e.target.value)}
              placeholder="Paste your JSON action plan here"
              rows={10}
            />
            <Button onClick={handleJsonSubmit}>Submit Plan</Button>
          </>
        )
      ) : (
        <p>Please sign in to view and manage your action plans.</p>
      )}
    </div>
  )
}

// ... (keep the existing icon components)

